#include <stdio.h>
#include <stdlib.h>
#include <limits.h> // Include for INT_MAX
#include <unistd.h>
#include <sys/wait.h>

struct process {
    int pid; // Process ID
    int arrival_time; // Arrival time
    int burst_time; // Burst time
    int remaining_time; // Remaining burst time
    int completion_time; // Completion time
};

void sjf_preemptive(struct process *processes, int n) {
    int current_time = 0;
    int completed_processes = 0;
    int min_remaining_time, min_index;

    while (completed_processes < n) {
        min_remaining_time = INT_MAX; // Initialize min_remaining_time with INT_MAX
        min_index = -1;

        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= current_time && processes[i].remaining_time < min_remaining_time && processes[i].remaining_time > 0) {
                min_remaining_time = processes[i].remaining_time;
                min_index = i;
            }
        }

        if (min_index == -1) {
            current_time++;
            continue;
        }

        processes[min_index].remaining_time--;
        current_time++;

        if (processes[min_index].remaining_time == 0) {
            processes[min_index].completion_time = current_time;
            completed_processes++;
        }
    }

    printf("PID\tCompletion Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\n", processes[i].pid, processes[i].completion_time);
    }
}

void round_robin(struct process *processes, int n, int quantum) {
    int current_time = 0;
    int completed_processes = 0;

    while (completed_processes < n) {
        int flag = 0; // Flag to check if any process was executed in this time quantum

        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= current_time && processes[i].remaining_time > 0) {
                flag = 1; // At least one process is being executed in this time quantum
                if (processes[i].remaining_time <= quantum) {
                    current_time += processes[i].remaining_time;
                    processes[i].remaining_time = 0;
                    processes[i].completion_time = current_time;
                    completed_processes++;
                } else {
                    current_time += quantum;
                    processes[i].remaining_time -= quantum;
                }
            }
        }

        if (flag == 0) {
            // If no process was executed in this time quantum, increment current time
            current_time++;
        }
    }

    printf("PID\tCompletion Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\n", processes[i].pid, processes[i].completion_time);
    }
}

int main() {
    int n, quantum;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct process *processes = (struct process*) malloc(n * sizeof(struct process));

    printf("Enter arrival time and burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d:\n", i + 1);
        printf("Arrival time: ");
        scanf("%d", &processes[i].arrival_time);
        printf("Burst time: ");
        scanf("%d", &processes[i].burst_time);
        processes[i].pid = i + 1;
        processes[i].remaining_time = processes[i].burst_time;
    }

    printf("Enter the time quantum for Round Robin: ");
    scanf("%d", &quantum);

    printf("\nShortest Job First (Preemptive):\n");
    sjf_preemptive(processes, n);

    printf("\nRound Robin:\n");
    round_robin(processes, n, quantum);

    free(processes);
    return 0;
}
