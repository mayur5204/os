#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

// Function to sort an array in ascending order
void bubbleSortAscending(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                // Swap arr[j] and arr[j+1]
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

// Function to sort an array in descending order
void bubbleSortDescending(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] < arr[j + 1]) {
                // Swap arr[j] and arr[j+1]
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int main() {
    int arr[] = {7, 2, 1, 6, 8, 5, 3, 4}; // Sample array
    int n = sizeof(arr) / sizeof(arr[0]); // Calculate the size of the array

    pid_t pid = fork(); // Create a new process

    if (pid < 0) {
        // Fork failed
        perror("fork");
        exit(EXIT_FAILURE);
    } else if (pid == 0) {
        // Child process
        printf("Sorting and displaying in ascending order:\n");

        // Sort the array in ascending order
        bubbleSortAscending(arr, n);

        // Display the sorted array
        printf("Sorted array (ascending): ");
        for (int i = 0; i < n; i++) {
            printf("%d ", arr[i]);
        }
        printf("\n");
    } else {
        // Parent process
        wait(NULL); // Wait for the child process to finish sorting and displaying in ascending order

        printf("\n");

        printf("Sorting and displaying in descending order:\n");

        // Sort the array in descending order
        bubbleSortDescending(arr, n);

        // Display the sorted array
        printf("Sorted array (descending): ");
        for (int i = 0; i < n; i++) {
            printf("%d ", arr[i]);
        }
        printf("\n");
    }

    return 0;
}
